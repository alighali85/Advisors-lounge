{"version":3,"sources":["serviceWorker.js","containers/appNavbar/index.tsx","containers/advisor/index.tsx","containers/RatingList/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AppNavbar","className","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Form","inline","FormControl","type","placeholder","onChange","this","props","onSearch","React","Component","Advisor","Card","style","width","Body","Title","name","Text","bio","title","placeholderRating","rating","RatingList","ListGroup","as","Item","active","initialRating","onClick","onSelect","Button","reset","variant","App","loadingElement","loadAdvisors","fetch","then","data","json","setState","allAdvisors","advisorsList","slice","handleIntersect","changes","observe","self","i","length","intersectionRatio","loading","state","page","loadMoreData","handleSearch","e","results","filter","advisor","toUpperCase","indexOf","target","value","handleFilter","lastName","email","telephone","createRef","cardsContainer","document","getElementsByClassName","loadingButton","addEventListener","IntersectionObserver","root","rootMargin","threshold","delay","Container","fluid","Row","Col","sm","lg","map","item","key","ref","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1dd9922d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\n\n\ninterface AppNavbarProps {\n\tonSearch?: any\n}\n\nexport default class AppNavbar extends React.Component<AppNavbarProps> {\n\trender() {\n\t\treturn <>\n\t\t\t<div className=\"app-navbar\">\n\t\t\t\t<Navbar bg=\"light\" expand=\"lg\">\n\t\t\t\t\t<Navbar.Brand href=\"#home\">Advisors lounge</Navbar.Brand>\n\t\t\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\t\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t\t<Form inline>\n\t\t\t\t\t\t\t<FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" onChange={this.props.onSearch} />\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t</Navbar.Collapse>\n\t\t\t\t</Navbar>\n\t\t\t</div>\n\t\t</>\n\t}\n}","import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport './advisor.scss'\nimport Rating from 'react-rating'\n\ninterface AdvisorProps {\n    id: number,\n    name?: string;\n    title?: string;\n    bio?: string;\n    rating: number\n}\n\nexport default class Advisor extends React.Component<AdvisorProps> {\n    constructor(props: any) {\n        super(props)\n    }\n\n    render() {\n        return <>\n            <div>\n                <Card style={{ width: '18rem' }}>\n                    <Card.Body>\n                        <Card.Title>{this.props.name}</Card.Title>\n                        <Card.Text>\n                            <i>{this.props.bio}</i>\n                            <span>{this.props.title}</span>\n                            <br />\n                            <Rating placeholderRating={this.props.rating} />\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </div>\n        </>\n    }\n}","import React from 'react'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Rating from 'react-rating'\nimport Button from 'react-bootstrap/Button'\n\ninterface RatingListProps {\n    onSelect?: () => void,\n    reset?: () => void\n}\n\nexport default class RatingList extends React.Component<RatingListProps> {\n    render() {\n        return (\n            <ListGroup as=\"ul\">\n                <br />\n                <ListGroup.Item as=\"li\" active>Filter by Rating</ListGroup.Item>\n                <ListGroup.Item>\n                    <Rating initialRating={0} onClick={this.props.onSelect} />\n                </ListGroup.Item>\n                <br />\n                <Button onClick={this.props.reset} variant=\"light\">Reset</Button>\n            </ ListGroup >\n        )\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport AppNavbar from './containers/appNavbar'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Advisor from './containers/advisor'\nimport './index.scss'\nimport RatingList from './containers/RatingList'\n\ninterface AppProps {\n  state?: any\n}\n\ninterface AppState {\n  advisorsList: Array<any>,\n  allAdvisors: Array<any>,\n  page: number,\n  loadingElement?: any,\n  loading: boolean\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private loadingElement: React.RefObject<HTMLDivElement>\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      advisorsList: [\n        {\n          id: 0 as number,\n          name: '' as string,\n          lastName: '' as string,\n          email: '' as string,\n          telephone: '' as string,\n          bio: '',\n          title: '',\n          rating: 0\n        }\n      ],\n      allAdvisors: [],\n      page: 0 as number,\n      loading: false\n    }\n    this.loadingElement = React.createRef()\n  }\n\n  componentDidMount() {\n    const self = this\n    const cardsContainer = document.getElementsByClassName('advisors-cards')[0]\n    const loadingButton = document.getElementsByClassName('loading-button')[0]\n    cardsContainer.addEventListener(\"scroll\", () => {\n      const options = {\n        root: null,\n        rootMargin: \"300px\",\n        threshold: 1.0,\n        delay: 300\n      }\n\n      const observer = new IntersectionObserver(self.handleIntersect, options)\n      observer.observe(loadingButton)\n    })\n\n    this.loadAdvisors()\n  }\n\n  loadAdvisors = () => {\n    fetch('/advisors').then(data => data.json()).then(data => {\n      this.setState({\n        allAdvisors: data,\n        advisorsList: data.slice(0, 20)\n      })\n    })\n  }\n\n  handleIntersect = (changes: any, observe: any) => {\n    const self = this\n    for (let i = 0; i < changes.length; i++) {\n      if (changes[i].intersectionRatio > 0.9) {\n        self.setState({ loading: true })\n        if (self.state.page < self.state.allAdvisors.length - 1) {\n          self.loadMoreData()\n          break\n        }\n      }\n    }\n  }\n\n  loadMoreData = () => {\n    this.setState({\n      advisorsList: this.state.allAdvisors.slice(0, this.state.advisorsList.length + 1)\n    })\n  }\n\n  handleSearch = (e: any) => {\n    const results = this.state.allAdvisors.filter(advisor => (\n      advisor.name.toUpperCase().indexOf(e.target.value.toUpperCase()) > -1)\n    )\n    this.setState({\n      advisorsList: results\n    })\n  }\n\n  handleFilter = (e?: any) => {\n    if (e === 'reset') {\n      this.loadAdvisors()\n      return\n    }\n    const results = this.state.allAdvisors.filter(advisor => (\n      advisor.rating === e)\n    )\n    this.setState({\n      advisorsList: results\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <AppNavbar onSearch={this.handleSearch} />\n        <Container fluid>\n          <Row className=\"show-grid\">\n            <Col sm={2} >\n              <RatingList onSelect={this.handleFilter} reset={() => this.handleFilter('reset')} />\n            </Col>\n            <Col lg={10} >\n              <div className=\"advisors-cards\">\n                {!!this.state.advisorsList && this.state.advisorsList.map((item, i) => <div key={i}>\n                  <Advisor\n                    id={item.id}\n                    name={item.name}\n                    bio={item.bio}\n                    title={item.title}\n                    rating={item.rating}\n                  /> </div>)}\n                <div ref={this.loadingElement} className='loading-button'></div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div >)\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}